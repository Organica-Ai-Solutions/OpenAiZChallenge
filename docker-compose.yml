version: '3.8'

services:
  # Redis Service
  redis:
    image: redis/redis-stack-server:latest
    container_name: nis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - nis_network

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: nis-kafka
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://nis-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - nis_network

  # Zookeeper Service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: nis-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - nis_network

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nis-backend
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=nis-kafka:9092
      - REDIS_URL=redis://nis-redis:6379
      - LOG_LEVEL=INFO
      - USE_REAL_DATA=true
      - DISABLE_MOCK_RESPONSES=true
    depends_on:
      - kafka
      - redis
    networks:
      - nis_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nis-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - nis_network

volumes:
  redis-data:
  kafka-data:
  zookeeper-data:

networks:
  nis_network:
    driver: bridge