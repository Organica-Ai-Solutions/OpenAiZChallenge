services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: nis-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: nis-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: nis-redis-simple
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Simplified Backend API (without complex GDAL dependencies)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: nis-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CLIENT_ID=nis-protocol
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - kafka

  # IKRP Codex Discovery Service
  ikrp:
    build:
      context: .
      dockerfile: Dockerfile.ikrp
    container_name: nis-ikrp
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis

  # Fallback Backend Service (runs on host)
  fallback-backend:
    image: python:3.11-slim
    container_name: nis-fallback-backend
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=info
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        pip install --no-cache-dir -r requirements.simple.txt &&
        python fallback_backend.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: nis-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_FALLBACK_API_URL=http://localhost:8003
      - NEXT_PUBLIC_GOOGLE_MAPS_KEY=AIzaSyCCMYQ_eQdaKPV30JGFEv_556O8N-ZzV9E
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - ikrp
      - fallback-backend

volumes:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs: